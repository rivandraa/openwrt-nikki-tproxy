name: Sync from Upstream (by commit)

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 22 * * *'  # 06:00 WITA
  #   - cron: '0 10 * * *'  # 18:00 WITA

jobs:
  selective-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout destination repo (this repo)
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/nikkinikki-org/OpenWrt-nikki.git
          git fetch upstream main

      - name: Get merge-base commit (last synced commit)
        id: get_base_commit
        run: |
          BASE_COMMIT=$(git merge-base HEAD upstream/main)
          echo "base_commit=$BASE_COMMIT" >> $GITHUB_OUTPUT

      - name: Get latest upstream commit
        id: get_latest_commit
        run: |
          LATEST=$(git rev-parse upstream/main)
          echo "latest_commit=$LATEST" >> $GITHUB_OUTPUT

      - name: Check if upstream has new commits
        id: check_upstream_diff
        run: |
          if [ "${{ steps.get_base_commit.outputs.base_commit }}" != "${{ steps.get_latest_commit.outputs.latest_commit }}" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi

      - name: List changed files from upstream
        id: changed_files
        if: steps.check_upstream_diff.outputs.has_update == 'true'
        run: |
          git diff --name-only ${{ steps.get_base_commit.outputs.base_commit }} ${{ steps.get_latest_commit.outputs.latest_commit }} \
            | grep -E '^(luci-app-nikki|nikki)/' > changed_files.txt || true
          cat changed_files.txt
          echo "changed=$(paste -sd ',' changed_files.txt)" >> $GITHUB_OUTPUT

      - name: Clone upstream repo for file copy
        if: steps.check_upstream_diff.outputs.has_update == 'true'
        run: |
          GIT_DIR=. git clone --depth=1 --branch=main https://github.com/nikkinikki-org/OpenWrt-nikki.git upstream-source

      - name: Merge and show conflict markers in changed files
        if: steps.check_upstream_diff.outputs.has_update == 'true'
        run: |
          for file in $(cat changed_files.txt); do
            echo "üîÑ Merging file: $file"
            LOCAL="$file"
            REMOTE="upstream-source/$file"
            BASE=".git/tmp-base-$file"

            mkdir -p "$(dirname "$BASE")"
            mkdir -p "$(dirname "$LOCAL")"

            git show "${{ steps.get_base_commit.outputs.base_commit }}:$file" > "$BASE" 2>/dev/null || touch "$BASE"

            if [ -f "$REMOTE" ]; then
              if [ -f "$LOCAL" ]; then
                git merge-file -p -L LOCAL -L BASE -L UPSTREAM "$LOCAL" "$BASE" "$REMOTE" > "$LOCAL.merged" || true
                if [ -s "$LOCAL.merged" ]; then
                  mv "$LOCAL.merged" "$LOCAL"
                  echo "‚úÖ Merge sukses: $file"
                else
                  echo "‚ö†Ô∏è Merge kosong: $file"
                  rm -f "$LOCAL.merged"
                fi
              else
                cp -a "$REMOTE" "$LOCAL"
                echo "üì• Ambil file baru: $file"
              fi
            else
              echo "‚ö†Ô∏è File remote tidak ditemukan: $REMOTE"
            fi
          done

      - name: Commit if there are changes
        id: commit_check
        if: steps.check_upstream_diff.outputs.has_update == 'true'
        run: |
          git add luci-app-nikki nikki || true
          if ! git diff --cached --quiet; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            git commit -m "Sync from upstream: ${{ steps.get_latest_commit.outputs.latest_commit }}"
            git remote set-url origin https://x-access-token:${{ secrets.PAT_WORKFLOW }}@github.com/${{ github.repository }}.git
            git push origin main
          else
            echo "No changes to commit"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify to Telegram
        if: steps.check_upstream_diff.outputs.has_update == 'true'
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          BRANCH="main"
          FILES=$(git diff-tree --no-commit-id --name-status -r HEAD | grep -E '^(A|M|D)\s+(luci-app-nikki|nikki)/' || true)

          if [ -n "$FILES" ]; then
            CHANGED=$(echo "$FILES" | while read status path; do
              case "$status" in
                A) ICON="üÜï" ;;
                M) ICON="‚úèÔ∏è" ;;
                D) ICON="‚ùå" ;;
                *) ICON="üìÑ" ;;
              esac

              ESCAPED_NAME=$(echo "$path" | sed -e 's/([][*()])/\\&/g')

              if grep -q '<<<<<<< LOCAL' "$path" 2>/dev/null; then
                CONFLICT_NOTE=" ‚ö†Ô∏è *File Konflik*"
              else
                CONFLICT_NOTE=""
              fi

              if [ "$status" = "D" ]; then
                echo "- $ICON $ESCAPED_NAME$CONFLICT_NOTE"
              else
                echo "- $ICON [$ESCAPED_NAME]($REPO_URL/blob/$BRANCH/$path)$CONFLICT_NOTE"
              fi
            done)
            MSG=$(printf "üõéÔ∏è *Sync dari upstream selesai*\n\n*File berubah:*\n%s" "$CHANGED")
          else
            MSG=$(printf "üõéÔ∏è *Sync dari upstream selesai*\n\nTidak ada Update.")
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MSG" \
            -d parse_mode="Markdown"
