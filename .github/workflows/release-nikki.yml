name: release-nikki

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.branch }} build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_cortex-a53
          - aarch64_generic
          - x86_64
        branch:
          - openwrt-24.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build package
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: nikki
          PACKAGES: luci-app-nikki
          NO_REFRESH_CHECK: true

      - name: Extract package versions
        id: extract_version
        run: |
          set -e
          PKG_DIR="bin/packages/${{ matrix.arch }}/nikki"

          PKG_FILE_LUCI=$(find "$PKG_DIR" -name 'luci-app-nikki_*.ipk' | head -n 1)
          if [[ -z "$PKG_FILE_LUCI" ]]; then
            echo "❌ luci-app-nikki package file not found!"
            exit 1
          fi
          VERSION_LUCI=$(basename "$PKG_FILE_LUCI" | sed -E 's/^luci-app-nikki_([^_]+)_.*\.ipk/\1/')
          echo "version_luci=$VERSION_LUCI" >> $GITHUB_OUTPUT

          PKG_FILE_NIKKI=$(find "$PKG_DIR" -name 'nikki_*.ipk' | head -n 1)
          if [[ -z "$PKG_FILE_NIKKI" ]]; then
            echo "❌ nikki package file not found!"
            exit 1
          fi
          VERSION_NIKKI=$(basename "$PKG_FILE_NIKKI" | sed -E 's/^nikki_([^_]+)_.*\.ipk/\1/')
          echo "version_nikki=$VERSION_NIKKI" >> $GITHUB_OUTPUT

      - name: Create release metadata
        id: release_meta
        run: |
          VERSION_LUCI="${{ steps.extract_version.outputs.version_luci }}"
          VERSION_NIKKI="${{ steps.extract_version.outputs.version_nikki }}"

          REL_NAME="Nikki-TProxy-${VERSION_LUCI}"
          ZIP_NAME="Nikki-TProxy-${VERSION_LUCI}_Nikki-${VERSION_NIKKI}_${{ matrix.arch }}-${{ matrix.branch }}"
          TAG_NAME=$(echo "$REL_NAME" | tr ' ~' '--')

          echo "relname=$REL_NAME" >> $GITHUB_OUTPUT
          echo "zipname=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "tagname=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Compress .ipk files
        run: |
          mkdir -p output
          cp bin/packages/${{ matrix.arch }}/nikki/*.ipk output/
          zip -j ${{ steps.release_meta.outputs.zipname }}.zip output/*.ipk

      - name: Get existing release upload URL
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.release_meta.outputs.tagname }}'
            });
            core.setOutput('upload_url', release.data.upload_url);

      - name: Upload ZIP to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.release_meta.outputs.zipname }}.zip
          asset_name: ${{ steps.release_meta.outputs.zipname }}.zip
          asset_content_type: application/zip

      - name: Upload ZIP to Telegram Channel
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          FILE="${{ steps.release_meta.outputs.zipname }}.zip"
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument \
            -F chat_id="${TELEGRAM_CHAT_ID}" \
            -F document=@"$FILE;filename=$(basename "$FILE")" \
            -F caption="🎉 *Release Nikki TProxy Mod*

🆎 luci-app-nikki: \`${{ steps.extract_version.outputs.version_luci }}\`
🧩 nikki: \`${{ steps.extract_version.outputs.version_nikki }}\`
📦 Arch: \`${{ matrix.arch }}\`
🌿 Branch: \`${{ matrix.branch }}\`" \
            -F parse_mode="Markdown"
